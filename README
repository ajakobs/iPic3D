
To install and run iPic3D, you need to do the following:

 Make sure that you have installed MPI

 Get the code:
   git clone https://github.com/ajakobs/iPic3D.git ipic3d
 or
   git clone git@github.com:ajakobs/iPic3D.git ipic3d
 Checkout the correct branch
   git checkout origin/develop  

 Set the following bootstrapping environment variable (e.g. in ~/.profile)
 to the path where created the git repository, for example:
   export IPIC_HOME="$HOME/ipic3d"

 For some systems like the knc cluster in Juelich or the DEEP
 cluster use the existing module files:
 
   module use $IPIC_HOME/env/miclogin
   module load ipic-nohdf5
  
 If porting to system_name, you can create a module for your
 system, e.g. by copying modules in env/miclogin and modifying
 as appropriate; when you succeed, please contribute your
 modules so that others can benefit from your work!
 
 If you do not have the module command (e.g. if you are
 running on your own laptop) then you need to define some
 environment variables by hand, e.g.:
 
 on a system with modules the appropriate directory
 would be revealed with e.g. "module show hdf5-par":
   export HDF5_ROOT="/usr/local/hdf5-par"
 
 Give access to the ipic script
   export PATH=$IPIC_HOME/scripts:$PATH
 This is used by the scripts in $IPIC_HOME/scripts
   export IPIC_MPIRUN="mpiexec"

 For the miclogin system scripts for compiling the application are provided.
 They will load the modules needed and create the build folders. 
 Four different versions of the application can be generated:
 
 no offload either for xeon
	. make_no_offload.sh
 or xeon phi
  	. make_no_offload_mic.sh
 offload with OmpSs or 
	. make_ompss.sh
 offload with MPI_Comm_spawn
	. make_spawn.sh

 If you want to run one of the offload versions you can adapt the 
 file that lists the nodes where to start all processes;
 for OmpSs it's env/miclogin/offload_hosts
   knc1-mic0
   knc1-mic0
   knc1-mic0
   knc1-mic0
   knc1
   knc1
   knc1
   knc1

 for the spawn version use scripts/spawnfile to specify where to  
 start the offloaded processes
   knc1
   knc1
   knc1
   knc1

 If you want to use more than 4 host processes / 8 in total you have to set
   export MPIEXEC_UNIVERSE_SIZE=<number of processes on host + number of offloaded processes>

 and you need to change the number of subdomains in the input file (parameters.inp in 
 your build folder) so that XLENxYLENxZLEN = # host processes

   # number of MPI subdomains in each direction
   XLEN = 2
   YLEN = 2
   ZLEN = 1

 For executing the program change to the build folder (for spawn the .xeonphi one
 if you want to do reverse offload) and use the command
 
   mpiexec -np 4 ./iPic3D.mic parameters.inp

  For problems with the ipic command try
    ipic help



If you want to use the new output format, you need to obtain
the H5hut code from Jorge Amaya.  To compile and install it:

  # Unfortunately H5hut 1.99.12 does not work for HDF5 version
  # 1.8.13 or higher, because the HDF5 committee removed an
  # MPI-POSIX driver that they thought no one was using; so do e.g.:
  module load hdf5/1.8.12
  # define HDF5_ROOT (see above)
  # install in home directory
  export H5HUT_DIR=$HOME/install
  mkdir $H5HUT_DIR
  # extract archive
  tar xvf H5hut-1.99.12.tar.bz2
  cd H5hut-1.99.12
  # configure
  ./configure --enable-parallel --enable-large-indices --prefix=$H5HUT_DIR --with-hdf5=$HDF5_ROOT
  make
  make install

To compensate for a deficiency in H5hut, we
have to use the -DPARALLEL_IO flag when we compile:

  export IPIC_CMAKE_ARGS="-DCMAKE_CXX_FLAGS=-DPARALLEL_IO -DIPIC_H5HUT_OUTPUT=ON"

Then we can build:

  mkdir build.para
  cd build.para
  ipic cmake

And then we can run:

  # change WriteMethod from default to Parallel
  vim src/inputfiles/GEM.inp
  # run the simulation; rm data/* is needed at start of each new run
  rm data/*; ipic run


